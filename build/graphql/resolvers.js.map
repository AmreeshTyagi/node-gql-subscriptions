{"version":3,"sources":["../../src/graphql/resolvers.js"],"names":["deviceControllers","deviceConstants","resolvers","Query","device","root","args","getDevice","id","devices","getDevices","Mutation","createDevice","updateDeviceLocation","updatedDevice","Subscription","watchDevice","resolve","payload","subscribe","asyncIterator","UPDATE_DEVICE","_id","toString","watchDevices","CREATE_DEVICE","DeviceSubscription","currentLocation","location","Device"],"mappings":";;;;;;AAAA;;AAEA;;AACA;;IAAYA,iB;;AACZ;;IAAYC,e;;;;AAEZ,IAAMC,YAAY;AAChBC,SAAO;AACLC,YAAQ,gBAACC,IAAD,EAAOC,IAAP;AAAA,aAAgBN,kBAAkBO,SAAlB,CAA4BD,KAAKE,EAAjC,CAAhB;AAAA,KADH;AAELC,aAAS,iBAACJ,IAAD,EAAOC,IAAP;AAAA,aAAgBN,kBAAkBU,UAAlB,CAA6BJ,IAA7B,CAAhB;AAAA;AAFJ,GADS;AAKhBK,YAAU;AACRC,kBAAc,sBAACP,IAAD,EAAOC,IAAP;AAAA,aAAgBN,kBAAkBY,YAAlB,CAA+BN,IAA/B,CAAhB;AAAA,KADN;AAERO,0BAAsB,8BAACR,IAAD,EAAOC,IAAP;AAAA,aAAgBN,kBAAkBc,aAAlB,CAAgCR,IAAhC,CAAhB;AAAA;AAFd,GALM;AAShBS,gBAAc;AACZC,iBAAa;AACXC,eAAS,iBAACC,OAAD;AAAA,eAAaA,OAAb;AAAA,OADE;AAEXC,iBAAW,sCACT;AAAA,eAAM,eAAOC,aAAP,CAAqBnB,gBAAgBoB,aAArC,CAAN;AAAA,OADS,EAET,UAACH,OAAD,EAAUZ,IAAV;AAAA,eAAmBY,QAAQI,GAAR,CAAYC,QAAZ,OAA2BjB,KAAKE,EAAnD;AAAA,OAFS;AAFA,KADD;AAQZgB,kBAAc;AACZP,eAAS,iBAACC,OAAD;AAAA,eAAaA,OAAb;AAAA,OADG;AAEZC,iBAAW;AAAA,eAAM,eAAOC,aAAP,CAAqB,CAACnB,gBAAgBoB,aAAjB,EAAgCpB,gBAAgBwB,aAAhD,CAArB,CAAN;AAAA;AAFC;AARF,GATE;AAsBhBC,sBAAoB;AAClBC,qBAAiB,yBAACvB,MAAD;AAAA,aAAYA,OAAOwB,QAAnB;AAAA,KADC;AAElBpB,QAAI,YAACJ,MAAD;AAAA,aAAYA,OAAOkB,GAAnB;AAAA;AAFc,GAtBJ;AA0BhBO,UAAQ;AACNrB,QAAI,YAACJ,MAAD;AAAA,aAAYA,OAAOkB,GAAnB;AAAA;AADE;AA1BQ,CAAlB;;kBA+BepB,S","file":"resolvers.js","sourcesContent":["import { withFilter } from 'graphql-subscriptions';\n\nimport { pubsub } from '../config/pubsub';\nimport * as deviceControllers from '../modules/devices/controllers';\nimport * as deviceConstants from '../modules/devices/constants';\n\nconst resolvers = {\n  Query: {\n    device: (root, args) => deviceControllers.getDevice(args.id),\n    devices: (root, args) => deviceControllers.getDevices(args),\n  },\n  Mutation: {\n    createDevice: (root, args) => deviceControllers.createDevice(args),\n    updateDeviceLocation: (root, args) => deviceControllers.updatedDevice(args),\n  },\n  Subscription: {\n    watchDevice: {\n      resolve: (payload) => payload,\n      subscribe: withFilter(\n        () => pubsub.asyncIterator(deviceConstants.UPDATE_DEVICE),\n        (payload, args) => payload._id.toString() === args.id,\n      ),\n    },\n    watchDevices: {\n      resolve: (payload) => payload,\n      subscribe: () => pubsub.asyncIterator([deviceConstants.UPDATE_DEVICE, deviceConstants.CREATE_DEVICE]),\n    },\n  },\n  DeviceSubscription: {\n    currentLocation: (device) => device.location,\n    id: (device) => device._id,\n  },\n  Device: {\n    id: (device) => device._id,\n  }\n};\n\nexport default resolvers;\n"]}