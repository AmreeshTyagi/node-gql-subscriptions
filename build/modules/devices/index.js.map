{"version":3,"sources":["../../../src/modules/devices/index.js"],"names":["controllers","router","post","req","res","createDevice","body","then","device","status","json","catch","e","put","next","id","params","location","updatedDevice","path","get","limit","parseInt","query","skip","getDevices","devices","console","error","getDevice"],"mappings":";;;;;;AAAA;;AAEA;;IAAYA,W;;;;;;AAEZ,IAAMC,SAAS,qBAAf;;AAEAA,OAAOC,IAAP,CAAY,GAAZ;AAAA,uDAAiB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AACfJ,wBAAYK,YAAZ,CAAyBF,IAAIG,IAA7B,EACGC,IADH,CACQ,UAACC,MAAD;AAAA,qBAAYJ,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,MAArB,CAAZ;AAAA,aADR,EAEGG,KAFH,CAES,UAACC,CAAD;AAAA,qBAAOR,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBE,CAArB,CAAP;AAAA,aAFT;;AADe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA;;AAMAX,OAAOY,GAAP,CAAW,MAAX,EAAmB,UAACV,GAAD,EAAMC,GAAN,EAAWU,IAAX,EAAoB;AAAA,MAC7BC,EAD6B,GACtBZ,IAAIa,MADkB,CAC7BD,EAD6B;AAAA,MAE7BE,QAF6B,GAEhBd,IAAIG,IAFY,CAE7BW,QAF6B;;AAGrCjB,cAAYkB,aAAZ,CAA0B,EAAEH,MAAF,EAAME,kBAAN,EAA1B,EACGV,IADH,CACQ,UAACC,MAAD;AAAA,WAAYJ,IAAIM,IAAJ,CAASF,MAAT,CAAZ;AAAA,GADR,EAEGG,KAFH,CAES,UAACC,CAAD,EAAO;AACZ,QAAIA,EAAEO,IAAF,KAAW,KAAf,EAAqB;AACnB,aAAOL,MAAP;AACD;AACDV,QAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBE,CAArB;AACD,GAPH;AAQD,CAXD;;AAaAX,OAAOmB,GAAP,CAAW,GAAX;AAAA,wDAAgB,kBAAOjB,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACRiB,iBADQ,GACAC,SAASnB,IAAIoB,KAAJ,CAAUF,KAAnB,EAA0B,CAA1B,CADA;AAERG,gBAFQ,GAEDF,SAASnB,IAAIoB,KAAJ,CAAUC,IAAnB,EAAyB,CAAzB,CAFC;;AAGdxB,wBAAYyB,UAAZ,CAAuB,EAAEJ,YAAF,EAASG,UAAT,EAAvB,EACGjB,IADH,CACQ,UAACmB,OAAD;AAAA,qBAAatB,IAAIM,IAAJ,CAASgB,OAAT,CAAb;AAAA,aADR,EAEGf,KAFH,CAES,UAACC,CAAD,EAAO;AACZe,sBAAQC,KAAR,CAAchB,CAAd;AACAR,kBAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBE,CAArB;AACD,aALH;;AAHc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAAA;AAAA;AAAA;AAAA;;AAWAX,OAAOmB,GAAP,CAAW,MAAX,EAAmB,UAACjB,GAAD,EAAMC,GAAN,EAAWU,IAAX,EAAoB;AACrCd,cAAY6B,SAAZ,CAAsB1B,IAAIa,MAAJ,CAAWD,EAAjC,EACGR,IADH,CACQ,UAACC,MAAD;AAAA,WAAYJ,IAAIM,IAAJ,CAASF,MAAT,CAAZ;AAAA,GADR,EAEGG,KAFH,CAES,UAACC,CAAD,EAAO;AACZ,QAAIA,EAAEO,IAAF,KAAW,KAAf,EAAqB;AACnB,aAAOL,MAAP;AACD;AACDV,QAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBE,CAArB;AACD,GAPH;AAQD,CATD;;kBAWeX,M","file":"index.js","sourcesContent":["import { Router } from 'express';\n\nimport * as controllers from './controllers';\n\nconst router = new Router();\n\nrouter.post('/', async (req, res) => {\n  controllers.createDevice(req.body)\n    .then((device) => res.status(201).json(device))\n    .catch((e) => res.status(400).json(e));\n});\n\nrouter.put('/:id', (req, res, next) => {\n  const { id } = req.params;\n  const { location } = req.body;\n  controllers.updatedDevice({ id, location })\n    .then((device) => res.json(device))\n    .catch((e) => {\n      if (e.path === '_id'){\n        return next();\n      }\n      res.status(400).json(e);\n    });\n});\n\nrouter.get('/', async (req, res) => {\n  const limit = parseInt(req.query.limit, 0);\n  const skip = parseInt(req.query.skip, 0);\n  controllers.getDevices({ limit, skip })\n    .then((devices) => res.json(devices))\n    .catch((e) => {\n      console.error(e);\n      res.status(400).json(e);\n    });\n});\n\nrouter.get('/:id', (req, res, next) => {\n  controllers.getDevice(req.params.id)\n    .then((device) => res.json(device))\n    .catch((e) => {\n      if (e.path === '_id'){\n        return next();\n      }\n      res.status(400).json(e);\n    });\n});\n\nexport default router;\n"]}